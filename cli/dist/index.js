#!/usr/bin/env node
import{Command as Q}from"commander";import{Command as G}from"commander";import{z as l}from"zod";import O from"fs/promises";var A=l.object({path:l.object({utils:l.string({message:"utils path is missing"}),components:l.string({message:"components path is missing"})},{message:"`path` config is missing "})});async function P(){let e=process.cwd(),t=await O.readFile(`${e}/components.json`,"utf-8"),o=JSON.parse(t),n=A.safeParse(o);if(!n.success)throw new Error("Invalid configuration file");return n.data}import{PrismaClient as B}from"@prisma/client";var f=new B;import{z as v}from"zod";import H from"prompts";function C(e,t,o){return e.split(t).map(r=>`${r.split("")[0].toUpperCase()}${r.slice(1)}`).join(o||"")}import T from"ora";import M from"path";import S from"fs/promises";async function J(e){try{return await S.stat(e),!0}catch{return!1}}async function b({path:e,file:t,name:o,replace:n}){let r=`${e}/${o}`;return await J(r)&&!n?!1:(await S.writeFile(r,t),!0)}function N(e,t){return e.replace("@/components/ui",`${t.components.replace("/src","@")}`).replace("@/utils/lib",`${t.utils.replace("/src","@")}`)}async function j(e,t,o){let n=T(`Writing ${e.name}...`).start(),r=C(e.name,"-")+".tsx";await b({path:M.resolve(process.cwd(),"."+t.path.components),name:r,file:N(e.content,t.path),replace:o?.replace})?n.succeed(`Successfuly inserted ${C(e.name,"-"," ")}.`):n.stop()}function k(e){return f.component.findMany({select:{content:!0,name:!0,dependencies:!0},where:{name:{in:e}}})}import d from"chalk";var F={error(...e){console.log(d.red(...e))},warn(...e){console.log(d.yellow(...e))},info(...e){console.log(d.cyan(...e))},success(...e){console.log(d.green(...e))},break(){console.log("")}};import K from"chalk";import x from"ora";import q from"fs/promises";import U from"path";async function I(){let e=U.resolve(process.cwd(),"package.json"),t=JSON.parse(await q.readFile(e,"utf-8"));return[...Object.keys(t.dependencies||{}),...Object.keys(t.devDependencies||{})]}import{execa as $}from"execa";async function E(e){try{let t=[],o=[];return e.forEach(n=>{n.includes("dev/")?t.push(n.replace("dev/","")):o.push(n)}),await $("npm",["install","-D",...t],{cwd:process.cwd()}),await $("npm",["install",...o],{cwd:process.cwd()}),!0}catch{return!1}}var L=v.object({components:v.array(v.string())}),D=new G().name("add").description("adds component to your project").argument("[components...]","components to add").action(async e=>{try{let t=await P(),o=L.parse({components:e}),n=(await f.component.findMany({select:{name:!0}})).map(s=>s.name),r=[],c=[];o.components.forEach(s=>{n.includes(s)?r.push(s):c.push(s)}),c.length>0&&console.log(K.yellow("Ignoring Invalid Component Names:"),c.join(", "));let g=r;if(o.components.length<=0){let{components:s}=await H({instructions:!1,type:"multiselect",hint:"Press [space] to select, [a] to select all, [enter] to submit",name:"components",message:"Select components",choices:n.map(a=>({title:a,value:a}))});g=s}if(g.length<=0){F.info("No valid components selected, exiting.");return}let W=await I(),z=await k(g),u=new Set,p=z,m=[];for(;p.length>0;){let s=x("Installing components...").start();await Promise.all(p.map(i=>(u.add(i.name),j(i,t)))),s.stop();let a=[];for(let{dependencies:i}of p)for(let h of i){if(h.includes("package/")){let y=h.replace("package/","");!W.includes(y.replace("dev/",""))&&!m.includes(y)&&m.push(y);continue}let w=h.replace("component/","");u.has(w)||(a.push(w),u.add(w))}if(p=[],a.length>0){let i=x("Fetching components...").start();p=await k(a),i.stop()}}if(m.length>0){let s=x("Installing dependencies...").start();await E(m),s.succeed("Completed dependency installation")}}catch(t){console.log(t)}});async function R(){try{let e=new Q().name("layers-ui").description("Adds pre-made components to projects").version("1.0.0");e.addCommand(D),e.parse(process.argv)}catch(e){console.log(e.message)}}process.argv[2]==="test"?void 0:R();
//# sourceMappingURL=index.js.map
#!/usr/bin/env node
import{Command as j}from"commander";import{Command as v}from"commander";import{z as i}from"zod";import w from"fs/promises";var y=i.object({path:i.object({utils:i.string({message:"utils path is missing"}),components:i.string({message:"components path is missing"})},{message:"`path` config is missing "})});async function l(){let o=process.cwd(),e=await w.readFile(`${o}/components.json`,"utf-8"),s=JSON.parse(e),n=y.safeParse(s);if(!n.success)throw new Error("Invalid configuration file");return n.data}import{PrismaClient as C}from"@prisma/client";var c=new C;import{z as m}from"zod";import d from"fs/promises";async function x(o){try{return await d.access(o),!0}catch{return!1}}async function g({path:o,file:e,name:s}){if(await x(o))throw new Error(`File with the name ${s} already exists`);return await d.writeFile(`${o}/${s}`,e),"Successfuly written file"}import E from"path";function u(o,e){return o.split(e).map(n=>`${n.split("")[0].toUpperCase()}${n.slice(1)}`).join("")}var $=m.object({components:m.array(m.string())}),h=new v().name("add").description("adds component to your project").argument("[components...]","components to add").action(async o=>{try{let e=await l(),s=$.parse({components:o}),n=(await c.component.findMany({select:{name:!0}})).map(t=>t.name),p=[],r=[];s.components.forEach(t=>{n.includes(t)?p.push(t):r.push(t)}),r.length>0&&(console.log("Ignoring Invalid Component Names: "),r.forEach((t,a)=>{console.log(` [${a+1}] ${t}`)}));let f=await c.component.findMany({select:{content:!0,name:!0},where:{name:{in:p}}});f.forEach(async t=>{let a=u(t.name,"-")+".tsx";await g({path:E.resolve(process.cwd(),e.path.components),name:a,file:t.content})}),console.log(f)}catch(e){console.log(e)}});async function N(){let o=new j().name("layers-ui").description("Adds pre-made components to projects").version("1.0.0");o.addCommand(h),o.parse(process.argv)}process.argv[2]==="test"?void 0:N();
//# sourceMappingURL=index.js.map